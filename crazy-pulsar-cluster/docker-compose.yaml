version: '3.8'
name: pulsar
networks:
  pulsar:
    driver: bridge
volumes:
  zookeeper:
  pulsar-manager:
  bookkeeper1:
  bookkeeper2:
  bookkeeper3:

services:
  # Start zookeeper
  zookeeper:
    image: apachepulsar/pulsar:latest
    container_name: zookeeper
    restart: on-failure
    ports:
      - "2181:2181"
    networks:
      - pulsar
    volumes:
      - zookeeper:/pulsar/data
    environment:
      - metadataStoreUrl=zk:${ZK_HOST}
      - PULSAR_MEM=-Xms256m -Xmx256m -XX:MaxDirectMemorySize=256m
    command: >
      bash -c "bin/apply-config-from-env.py conf/zookeeper.conf && \
             bin/generate-zookeeper-config.sh conf/zookeeper.conf && \
             exec bin/pulsar zookeeper"
    healthcheck:
      test: [ "CMD", "bin/pulsar-zookeeper-ruok.sh" ]
      interval: 10s
      timeout: 5s
      retries: 30

  # Init cluster metadata
  pulsar-init:
    image: apachepulsar/pulsar:latest
    networks:
      - pulsar
    command: >
      bash -c "bin/pulsar initialize-cluster-metadata \
      --cluster ${PULSAR_CLUSTER_NAME} \
      --zookeeper ${ZK_HOST} \
      --configuration-store ${ZK_HOST} \
      --web-service-url http://${BROKER_ADVERTISE_URL}:${BROKER1_WEB_PORT},http://${BROKER_ADVERTISE_URL}:${BROKER2_WEB_PORT},http://${BROKER_ADVERTISE_URL}:${BROKER3_WEB_PORT} \
      --broker-service-url pulsar://${BROKER_ADVERTISE_URL}:${BROKER1_BROKER_PORT},pulsar://${BROKER_ADVERTISE_URL}:${BROKER2_BROKER_PORT},pulsar://${BROKER_ADVERTISE_URL}:${BROKER3_BROKER_PORT}"
    depends_on:
      zookeeper:
        condition: service_healthy
  # Start bookie
  bookie1:
    image: apachepulsar/pulsar:latest
    container_name: bookie1
    restart: on-failure
    #    bookie啟動時會自己測試advertise address 是否可連接...
    ports:
      - ${BOOKIE1_PORT}:${BOOKIE1_PORT}
    networks:
      - pulsar
    environment:
      - bookiePort=${BOOKIE1_PORT}
      - clusterName=${PULSAR_CLUSTER_NAME}
      - zkServers=${ZK_HOST}
      - metadataServiceUri=metadata-store:zk:${ZK_HOST}
      # otherwise every time we run docker compose uo or down we fail to start due to Cookie
      # See: https://github.com/apache/bookkeeper/blob/405e72acf42bb1104296447ea8840d805094c787/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java#L57-68
      - advertisedAddress=${BOOKIE_ADVERTISE_HOST}
      - bookieId=bookie1
      #      bookieId不能隨便更換!
      - BOOKIE_MEM=-Xms512m -Xmx512m -XX:MaxDirectMemorySize=256m
    depends_on:
      zookeeper:
        condition: service_healthy
      pulsar-init:
        condition: service_completed_successfully
    # Map the local directory to the container to avoid bookie startup failure due to insufficient container disks.
    volumes:
      - bookkeeper1:/pulsar/data
    command: bash -c "bin/apply-config-from-env.py conf/bookkeeper.conf && exec bin/pulsar bookie"
  bookie2:
    image: apachepulsar/pulsar:latest
    container_name: bookie2
    restart: on-failure
    #    bookie啟動時會自己測試advertise address 是否可連接...
    ports:
      - ${BOOKIE2_PORT}:${BOOKIE2_PORT}
    networks:
      - pulsar
    environment:
      - bookiePort=${BOOKIE2_PORT}
      - clusterName=${PULSAR_CLUSTER_NAME}
      - zkServers=${ZK_HOST}
      - metadataServiceUri=metadata-store:zk:${ZK_HOST}
      # otherwise every time we run docker compose uo or down we fail to start due to Cookie
      # See: https://github.com/apache/bookkeeper/blob/405e72acf42bb1104296447ea8840d805094c787/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java#L57-68
      - advertisedAddress=${BOOKIE_ADVERTISE_HOST}
      - bookieId=bookie2
      #      bookieId不能隨便更換!
      - BOOKIE_MEM=-Xms512m -Xmx512m -XX:MaxDirectMemorySize=256m
    depends_on:
      zookeeper:
        condition: service_healthy
    # Map the local directory to the container to avoid bookie startup failure due to insufficient container disks.
    volumes:
      - bookkeeper2:/pulsar/data
    command: bash -c "bin/apply-config-from-env.py conf/bookkeeper.conf && exec bin/pulsar bookie"
  bookie3:
    image: apachepulsar/pulsar:latest
    container_name: bookie3
    restart: on-failure
    #    bookie啟動時會自己測試advertise address 是否可連接...
    ports:
      - ${BOOKIE3_PORT}:${BOOKIE3_PORT}
    networks:
      - pulsar
    environment:
      - bookiePort=${BOOKIE3_PORT}
      - clusterName=${PULSAR_CLUSTER_NAME}
      - zkServers=${ZK_HOST}
      - metadataServiceUri=metadata-store:zk:${ZK_HOST}
      # otherwise every time we run docker compose uo or down we fail to start due to Cookie
      # See: https://github.com/apache/bookkeeper/blob/405e72acf42bb1104296447ea8840d805094c787/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java#L57-68
      - advertisedAddress=${BOOKIE_ADVERTISE_HOST}
      - bookieId=bookie3
      #      bookieId不能隨便更換!
      - BOOKIE_MEM=-Xms512m -Xmx512m -XX:MaxDirectMemorySize=256m
    depends_on:
      zookeeper:
        condition: service_healthy
    # Map the local directory to the container to avoid bookie startup failure due to insufficient container disks.
    volumes:
      - bookkeeper3:/pulsar/data
    command: bash -c "bin/apply-config-from-env.py conf/bookkeeper.conf && exec bin/pulsar bookie"

  # Start broker
  broker1:
    image: apachepulsar/pulsar:latest
    container_name: broker1
    hostname: broker1
    restart: on-failure
    networks:
      - pulsar
    #      advertise 是 export info(ip/port) for out of vm instants who what to connect  to broker instance...
    environment:
      - brokerServicePort=${BROKER1_BROKER_PORT}
      - webServicePort=${BROKER1_WEB_PORT}
      - metadataStoreUrl=zk:${ZK_HOST}
      - zookeeperServers=${ZK_HOST}
      - clusterName=${PULSAR_CLUSTER_NAME}
      - managedLedgerDefaultEnsembleSize=1
      - managedLedgerDefaultWriteQuorum=1
      - managedLedgerDefaultAckQuorum=1
      - advertisedAddress=${BROKER_ADVERTISE_URL:-127.0.87.87:9487}
      - advertisedListeners=external:pulsar://${BROKER_ADVERTISE_URL:-127.0.87.87:9487}:6650
      - PULSAR_MEM=-Xms512m -Xmx512m -XX:MaxDirectMemorySize=256m
    depends_on:
      zookeeper:
        condition: service_healthy
      bookie1:
        condition: service_started
      bookie2:
        condition: service_started
      bookie3:
        condition: service_started
    ports:
      - ${BROKER1_BROKER_PORT}:${BROKER1_BROKER_PORT}
      - ${BROKER1_WEB_PORT}:${BROKER1_WEB_PORT}
    command: bash -c "bin/apply-config-from-env.py conf/broker.conf && exec bin/pulsar broker"
  broker2:
    image: apachepulsar/pulsar:latest
    container_name: broker2
    hostname: broker2
    restart: on-failure
    networks:
      - pulsar
    #      advertise 是 export info(ip/port) for out of vm instants who what to connect  to broker instance...
    environment:
      - brokerServicePort=${BROKER2_BROKER_PORT}
      - webServicePort=${BROKER2_WEB_PORT}
      - metadataStoreUrl=zk:${ZK_HOST}
      - zookeeperServers=${ZK_HOST}
      - clusterName=${PULSAR_CLUSTER_NAME}
      - managedLedgerDefaultEnsembleSize=1
      - managedLedgerDefaultWriteQuorum=1
      - managedLedgerDefaultAckQuorum=1
      - advertisedAddress=${BROKER_ADVERTISE_URL:-127.0.87.87:9487}
      - advertisedListeners=external:pulsar://${BROKER_ADVERTISE_URL:-127.0.87.87:9487}:${BROKER2_BROKER_PORT}
      - PULSAR_MEM=-Xms512m -Xmx512m -XX:MaxDirectMemorySize=256m
    depends_on:
      zookeeper:
        condition: service_healthy
      bookie1:
        condition: service_started
      bookie2:
        condition: service_started
      bookie3:
        condition: service_started
    ports:
      - ${BROKER2_BROKER_PORT}:${BROKER2_BROKER_PORT}
      - ${BROKER2_WEB_PORT}:${BROKER2_WEB_PORT}
    command: bash -c "bin/apply-config-from-env.py conf/broker.conf && exec bin/pulsar broker"
  broker3:
    image: apachepulsar/pulsar:latest
    container_name: broker3
    hostname: broker3
    restart: on-failure
    networks:
      - pulsar
    environment:
      - brokerServicePort=${BROKER3_BROKER_PORT}
      - webServicePort=${BROKER3_WEB_PORT}
      - metadataStoreUrl=zk:${ZK_HOST}
      - zookeeperServers=${ZK_HOST}
      - clusterName=${PULSAR_CLUSTER_NAME}
      - managedLedgerDefaultEnsembleSize=1
      - managedLedgerDefaultWriteQuorum=1
      - managedLedgerDefaultAckQuorum=1
      - advertisedAddress=${BROKER_ADVERTISE_URL:-127.0.87.87:9487}
      - advertisedListeners=external:pulsar://${BROKER_ADVERTISE_URL:-127.0.87.87:9487}:${BROKER3_BROKER_PORT}
      - PULSAR_MEM=-Xms512m -Xmx512m -XX:MaxDirectMemorySize=256m
    depends_on:
      zookeeper:
        condition: service_healthy
      bookie1:
        condition: service_started
      bookie2:
        condition: service_started
      bookie3:
        condition: service_started
    ports:
      - ${BROKER3_BROKER_PORT}:${BROKER3_BROKER_PORT}
      - ${BROKER3_WEB_PORT}:${BROKER3_WEB_PORT}
    command: bash -c "bin/apply-config-from-env.py conf/broker.conf && exec bin/pulsar broker"


  # Pulsar Manager (Admin UI)
  pulsar-manager:
    image: apachepulsar/pulsar-manager:latest
    container_name: pulsar-manager
    restart: unless-stopped
    ports:
      - "9527:9527" # Pulsar Manager UI port
      - "7750:7750"
    environment:
      SPRING_CONFIGURATION_FILE: /pulsar-manager/pulsar-manager/application.properties
      SPRING_DATASOURCE_URL: jdbc:postgresql://${POSTGRESQL}/pulsar_manager
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
    volumes:
      - pulsar-manager:/data
      - ./pulsar-manager-conf/application.properties:/pulsar-manager/pulsar-manager/application.properties
    depends_on:
      broker1:
        condition: service_started
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9527" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - pulsar

